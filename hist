#!/usr/bin/awk -f
#
# Copyright (c) 2012 Douglas G. Scofield, Umeå Plant Sciences Centre, Umeå, Sweden
# douglas.scofield@plantphys.umu.se
# douglasgscofield@gmail.com
#
# No warranty is implied or assumed by this code.  Please send bugs, suggestions etc.
#
# Calculates a histogram of input values placed into integer bins.  Bins
# are half-open [i,i+1) so values are *floored down* to the nearest integer.
#
#
# CHANGELOG
# 2012-12-02 : clean the script up a bit
# 2012-11-27 : create the script


BEGIN { 
    # parameters
    FS = "\t"; 
    OFS = "\t"; 
    sparse = 0.01;     # if less than this fraction of the hist is occupied, exit
    override = 0;      # sparse hist will not be printed unless override=1 is set
    header = 0;        # does the input have a header? if so how many lines?
    print_header = 0;  # print a simple "bin", "count" header on the output
    skip_comment = 1;  # skip '#' lines on input

    # internal variables
    n_a = 0.0;
    n_total = 0.0;
    the_min = 1.0e+20  # may be too low for your application
    the_max = -1.0e+20  # may be too high for your application
}

function floor(v,    ans) {
	ans = int(v);
	return((ans > v) ? ans - 1 : ans);
}

{  
    if (header && NR <= header) next;
    if (skip_comment && $0 ~ /^#/) next;

    val = floor($1 + 0.0);
    if (! a[val]) {  # initialize counts as floats
        a[val] = 1.0;
        n_a += 1.0;
    } else {
        a[val] += 1.0;
        n_total += 1.0;
    }
    if (val > the_max) {
        the_max = val;
    } else if (val < the_min) {
        the_min = val;
    }
}

END {
    if (print_header) 
        print "bin","count";

    occupancy = n_a / (the_max - the_min);
    if (occupancy < sparse && ! override) {
        printf("Less than %f of the input range is occupied (%f).  Use override=1 to print the histogram anyway\n", sparse, occupancy) > "/dev/stderr";
    } else {
        for (i = the_min; i <= the_max; i += 1.0) { 
            printf("%.0f%s%.0f\n", i, OFS, a[i] ? a[i] : 0.0);
        }
    }
}
